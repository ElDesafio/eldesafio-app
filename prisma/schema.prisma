// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  INVITED
  ACTIVE
  INACTIVE
}

model User {
  id                           Int                      @id @default(autoincrement())
  status                       UserStatus               @default(value: INVITED)
  email                        String                   @unique
  firstName                    String
  lastName                     String
  birthday                     String?
  city                         String?
  address                      String?
  picture                      String?
  phone1                       String?
  phone2                       String?
  twitter                      String?
  facebook                     String?
  linkedin                     String?
  skype                        String?
  biography                    String?
  createdAt                    DateTime                 @default(now()) @db.Timestamptz
  updatedAt                    DateTime                 @default(now()) @updatedAt @db.Timestamptz
  createdParticipants          Participant[]            @relation("CreatedParticipantByUser")
  updatedParticipants          Participant[]            @relation("UpdatedParticipantByUser")
  createdPrograms              Program[]                @relation("CreatedProgramByUser")
  updatedPrograms              Program[]                @relation("UpdatedProgramByUser")
  createdParticipantOnPrograms ParticipantsOnPrograms[] @relation("CreatedParticipantsOnProgramsByUser")
  updatedParticipantOnPrograms ParticipantsOnPrograms[] @relation("UpdatedParticipantsOnProgramsByUser")
  programs                     UsersOnPrograms[]        @relation("UserOnProgramsByUser")
  createdSchools               School[]                 @relation("CreatedSchoolByUser")
  updatedSchools               School[]                 @relation("UpdatedSchoolByUser")
  createdParticipantsHealth    ParticipantHealth[]      @relation("CreatedParticipantHealthByUser")
  updatedParticipantsHealth    ParticipantHealth[]      @relation("UpdatedParticipantHealthByUser")
  createdSurveyBiography       SurveyBiography[]        @relation("CreatedSurveyBiographyByUser")
  updatedSurveyBiography       SurveyBiography[]        @relation("UpdatedSurveyBiographyByUser")
  roles                        UserRoles[]
  createdClasses               Class[]                  @relation("CreatedClassByUser")
  updatedClasses               Class[]                  @relation("UpdatedClassByUser")
}

enum Roles {
  ADMIN
  MENTOR
  FACILITATOR
  FACILITATOR_VOLUNTEER
}

model UserRoles {
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  role   Roles

  @@id([userId, role])
}

enum Sex {
  MALE
  FEMALE
}

enum Neighborhood {
  LA_LATA
  MORENO
  SAN_FRANCISQUITO
  OTHER
}

enum PhoneBelongsTo {
  SELF
  MOTHER
  FATHER
  TUTOR
}

enum SchoolYear {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  YEAR_1
  YEAR_2
  YEAR_3
  YEAR_4
  YEAR_5
}

enum ParticipantYearStatus {
  ACTIVE
  INACTIVE
  WAITING
}

model Participant {
  id                         Int                      @id @default(autoincrement())
  firstName                  String
  lastName                   String
  birthday                   String
  dni                        String
  sex                        Sex
  email                      String?
  neighborhood               Neighborhood?
  city                       String?
  address                    String?
  picture                    String?
  medicalInsurance           String?
  phone1                     String?
  phone1HasWhatsapp          Boolean                  @default(false)
  phone1BelongsTo            PhoneBelongsTo?
  phone2                     String?
  phone2HasWhatsapp          Boolean                  @default(false)
  phone2BelongsTo            PhoneBelongsTo?
  biography                  String?
  school                     School?                  @relation(fields: [schoolId], references: [id])
  notSchooled                Boolean                  @default(false)
  schoolYear                 SchoolYear?
  presentedDNI               Boolean                  @default(false)
  presentedHealthCertificate Boolean                  @default(false)
  healthCertificateDate      String?
  createdByUser              User                     @relation("CreatedParticipantByUser", fields: [createdBy], references: [id])
  createdBy                  Int
  updatedByUser              User                     @relation("UpdatedParticipantByUser", fields: [updatedBy], references: [id])
  updatedBy                  Int
  createdAt                  DateTime                 @default(now()) @db.Timestamptz
  updatedAt                  DateTime                 @default(now()) @updatedAt @db.Timestamptz
  surveyBiography            SurveyBiography?
  programs                   ParticipantsOnPrograms[] @relation("ParticipantOnProgramsByParticipant")
  schoolId                   Int?
  ParticipantHealth          ParticipantHealth?
  ParticipantStatus          ParticipantStatus[]
  ParticipantsOnClasses      ParticipantsOnClasses[]  @relation("ParticipantsOnClassesByParticipant")
}

model ParticipantStatus {
  year          Int
  participantId Int
  status        ParticipantYearStatus
  participant   Participant           @relation(fields: [participantId], references: [id])

  @@id([year, participantId])
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  ZERO_POSITIVE
  ZERO_NEGATIVE
}

enum FormAnswerOptions {
  YES
  NO
  DKNA // Don't know or not answered
}

model ParticipantHealth {
  participantId             Int               @id
  participant               Participant       @relation(fields: [participantId], references: [id])
  bloodType                 BloodType
  isNormalPregnancy         FormAnswerOptions
  hasCompleteVaccination    FormAnswerOptions
  missingVaccines           String?
  hasCongenitalHeartDisease FormAnswerOptions
  hasHypertension           FormAnswerOptions
  hasHeartMurmurs           FormAnswerOptions
  hasArrhythmia             FormAnswerOptions
  hasAllergy                FormAnswerOptions
  allergyDetails            String?
  hasFoodRestriction        FormAnswerOptions
  foodRestrictionDetails    String?
  hasChronicDisease         FormAnswerOptions
  chronicDiseaseDetails     String?
  isTakingMedication        FormAnswerOptions
  takingMedicationDetails   String?
  hasBeenHospitalized       FormAnswerOptions
  hospitalizedDetails       String?
  canDoPhysicalActivity     FormAnswerOptions
  observations              String?
  createdByUser             User              @relation("CreatedParticipantHealthByUser", fields: [createdBy], references: [id])
  createdBy                 Int
  updatedByUser             User              @relation("UpdatedParticipantHealthByUser", fields: [updatedBy], references: [id])
  updatedBy                 Int
  createdAt                 DateTime          @default(now()) @db.Timestamptz
  updatedAt                 DateTime          @default(now()) @updatedAt @db.Timestamptz
}

model SurveyBiography {
  participantId                 Int                @id
  Participant                   Participant        @relation(fields: [participantId], references: [id])
  /// Who the participant lives with
  livesWith                     String
  /// Whether the participant changed school
  changedSchool                 FormAnswerOptions
  /// Whether the participant repeated the school year
  reasonChangedSchool           String?
  repeatedYear                  FormAnswerOptions
  /// How are they going in the school
  reasonRepeatedYear            String?
  schoolSituation               String
  /// Why is the participant interested in participating in the programs?
  programsInterest              String
  /// Whether participated in the programs before
  participatedBefore            FormAnswerOptions
  /// Whether are they doing other activities besided El Desafio
  participatedBeforeDescription String?
  finishedYear                  FormAnswerOptions?
  otherActivities               FormAnswerOptions
  otherActivitiesDescription    String?
  /// Personal description
  personalDescription           String
  /// Home Activities and typical day activities
  homeActivities                String
  createdByUser                 User               @relation("CreatedSurveyBiographyByUser", fields: [createdBy], references: [id])
  createdBy                     Int
  updatedByUser                 User               @relation("UpdatedSurveyBiographyByUser", fields: [updatedBy], references: [id])
  updatedBy                     Int
  createdAt                     DateTime           @default(now()) @db.Timestamptz
  updatedAt                     DateTime           @default(now()) @updatedAt @db.Timestamptz
}

enum ProgramSex {
  MALE
  FEMALE
  ALL
}

enum Weekdays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Program {
  id            Int                      @id @default(autoincrement())
  name          String
  description   String?
  year          Int
  seats         Int
  ageFrom       Int
  ageTo         Int
  ageByYear     Boolean                  @default(false)
  sex           ProgramSex
  createdByUser User                     @relation("CreatedProgramByUser", fields: [createdBy], references: [id])
  createdBy     Int
  updatedByUser User                     @relation("UpdatedProgramByUser", fields: [updatedBy], references: [id])
  updatedBy     Int
  createdAt     DateTime                 @default(now()) @db.Timestamptz
  updatedAt     DateTime                 @default(now()) @updatedAt @db.Timestamptz
  participants  ParticipantsOnPrograms[] @relation("ParticipantOnProgramsByProgram")
  programDays   ProgramDays[]            @relation("ProgramDaysByProgram")
  educators     UsersOnPrograms[]        @relation("UserOnProgramsByProgram")
  classes       Class[]                  @relation("ClassByProgram")
}

model UsersOnPrograms {
  user          User     @relation("UserOnProgramsByUser", fields: [userId], references: [id])
  userId        Int
  program       Program  @relation("UserOnProgramsByProgram", fields: [programId], references: [id])
  programId     Int
  isFacilitator Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz

  @@id([userId, programId])
}

enum ParticipantsOnProgramsStatus {
  ACTIVE
  INACTIVE
  WAITING
}

model ParticipantsOnPrograms {
  program          Program                      @relation("ParticipantOnProgramsByProgram", fields: [programId], references: [id])
  programId        Int
  participant      Participant                  @relation("ParticipantOnProgramsByParticipant", fields: [participantId], references: [id])
  participantId    Int
  /// It's used to know was ever active so we can show/hide the "baja" label for those that were ever active
  wasEverActive    Boolean                      @default(false)
  status           ParticipantsOnProgramsStatus @default(ACTIVE)
  waitingListOrder String?
  createdAt        DateTime                     @default(now()) @db.Timestamptz
  updatedAt        DateTime                     @default(now()) @updatedAt @db.Timestamptz
  createdByUser    User                         @relation("CreatedParticipantsOnProgramsByUser", fields: [createdBy], references: [id])
  createdBy        Int
  updatedByUser    User                         @relation("UpdatedParticipantsOnProgramsByUser", fields: [updatedBy], references: [id])
  updatedBy        Int

  @@id([programId, participantId])
}

model ProgramDays {
  id        Int      @id @default(autoincrement())
  program   Program  @relation("ProgramDaysByProgram", fields: [programId], references: [id])
  programId Int
  day       Weekdays
  fromTime  String
  toTime    String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz
}

model Class {
  id            Int                     @id @default(autoincrement())
  programId     Int
  program       Program                 @relation("ClassByProgram", fields: [programId], references: [id], onDelete: Cascade)
  date          DateTime                @db.Date
  isRainyDay    Boolean                 @default(false)
  createdAt     DateTime                @default(now()) @db.Timestamptz
  updatedAt     DateTime                @default(now()) @updatedAt @db.Timestamptz
  createdBy     Int
  createdByUser User                    @relation("CreatedClassByUser", fields: [createdBy], references: [id])
  updatedBy     Int
  updatedByUser User                    @relation("UpdatedClassByUser", fields: [updatedBy], references: [id])
  participants  ParticipantsOnClasses[] @relation("ParticipantsOnClassesByClass")
}

enum ClassAttendanceStatus {
  UNKNOWN
  PRESENT
  LATE
  ABSENT
  EXCUSED
}

model ParticipantsOnClasses {
  classId       Int
  class         Class                 @relation("ParticipantsOnClassesByClass", fields: [classId], references: [id], onDelete: Cascade)
  participantId Int
  participant   Participant           @relation("ParticipantsOnClassesByParticipant", fields: [participantId], references: [id], onDelete: Cascade)
  status        ClassAttendanceStatus @default(UNKNOWN)
  createdAt     DateTime              @default(now()) @db.Timestamptz
  updatedAt     DateTime              @default(now()) @updatedAt @db.Timestamptz

  @@id([classId, participantId])
}

model School {
  id                 Int           @id @default(autoincrement())
  name               String
  address            String
  city               String
  email              String?
  phone              String?
  principalName      String?
  principalPhone     String?
  vicePrincipalName  String?
  vicePrincipalPhone String?
  createdAt          DateTime      @default(now()) @db.Timestamptz
  updatedAt          DateTime      @default(now()) @updatedAt @db.Timestamptz
  createdByUser      User          @relation("CreatedSchoolByUser", fields: [createdBy], references: [id])
  createdBy          Int
  updatedByUser      User          @relation("UpdatedSchoolByUser", fields: [updatedBy], references: [id])
  updatedBy          Int
  Participant        Participant[]
}
